@model IEnumerable<sys.Models.Quiz.CreateQ>
@{
    Layout = "~/Views/Shared/_LayoutPageTeacher.cshtml";
    ViewBag.Title = "Quizzes";
    // Pagination setup
    var pageQuery = Request.QueryString["page"];
    int page = 1;
    if (!string.IsNullOrEmpty(pageQuery) && int.TryParse(pageQuery, out var p)) { page = p; }
    int pageSize = 4;
    // Order ascending by Id
    var quizList = Model.OrderByDescending(q => q.Id).ToList();
    var pagedQuiz = quizList.Skip((page - 1) * pageSize).Take(pageSize);
}
 
<!-- Inline CSS for turquoise theme and table styling -->
<style>
    :root {
        --bs-primary: #40E0D0;
    }

    .custom-block {
        background: #fff;
        border-radius: .5rem;
        padding: 1rem;
        box-shadow: 0 .125rem .25rem rgba(0,0,0,.075);
        margin-bottom: 0;
    }

    h3.mt-0 {
        margin-top: 0;
        color: var(--bs-primary);
        font-size: 1.5rem;
    }

    .account-table {
        width: 100%;
        table-layout: auto;
        font-size: .85rem;
    }

        .account-table th {
            background-color: var(--bs-primary);
            color: #fff;
            padding: .75rem;
        }

        .account-table td {
            padding: .75rem;
            vertical-align: middle;
            word-wrap: break-word;
        }

    .table-responsive {
        overflow-x: auto;
    }

    .btn-info {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        font-size: .8rem;
        padding: .25rem .5rem;
    }

    .btn-outline-secondary {
        font-size: .8rem;
        padding: .25rem .5rem;
    }
</style>

<h3 class="mt-0">Quizzes</h3>
<p>
    <a class="btn btn-sm btn-info" href="@Url.Action("Create")">Create New</a>
</p>

@if (!quizList.Any())
{
    <div class="alert alert-info">No quizzes found.</div>
}
else
{
    <div class="custom-block">
        <h5 class="mb-4">Quiz List</h5>
        <div class="table-responsive">
            <table class="account-table table">
                <thead>
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Subject</th>
                        <th scope="col">Instructions</th>
                        <th scope="col">Start Date</th>
                        <th scope="col">End Date</th>
                        <th scope="col">Publish Grade</th>
                        <th scope="col">Actions</th>
                        <th scope="col">Questions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in pagedQuiz)
                    {
                        <tr>
                            <td>@item.QuizTitle</td>
                            <td>@item.Subject</td>
                            <td>@item.Instructions</td>
                            <td>@item.StartDate.ToString("MMM d, yyyy")</td>
                            <td>@item.EndDate.ToString("MMM d, yyyy")</td>
                            <td>
                                @(item.PublishGradeAfterSubmission
                                    ? "<span class=\"badge bg-success\">Yes</span>"
                                    : "<span class=\"badge bg-secondary\">No</span>")
                            </td>
                            <td>
                                <a class="btn btn-sm btn-outline-secondary" href="@Url.Action("Edit", new { id = item.Id })">Edit</a>
                                <a class="btn btn-sm btn-outline-secondary" href="@Url.Action("Details", new { id = item.Id })">Details</a>
                            </td>
                            <td>
                                <a class="btn btn-sm btn-info" href="@Url.Action("Index", "QuizQAs", new { quizId = item.Id })">View Questions</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-between">
            @if (page > 1)
            {
                @Html.ActionLink("Previous", "Index", new { page = page - 1 }, new { @class = "btn btn-sm btn-outline-secondary" })
            }
            @if (quizList.Count > page * pageSize)
            {
                @Html.ActionLink("Next", "Index", new { page = page + 1 }, new { @class = "btn btn-sm btn-outline-secondary" })
            }
        </div>
    </div>
}
